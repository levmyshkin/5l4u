diff --git a/config/install/responsive_favicons.settings.yml b/config/install/responsive_favicons.settings.yml
index 0191a86..ea48904 100644
--- a/config/install/responsive_favicons.settings.yml
+++ b/config/install/responsive_favicons.settings.yml
@@ -1,3 +1,4 @@
+path_type: 'upload'
 path: 'favicons'
 tags: []
 remove_default: 0
diff --git a/responsive_favicons.module b/responsive_favicons.module
index 6845770..58a0c8d 100644
--- a/responsive_favicons.module
+++ b/responsive_favicons.module
@@ -181,5 +181,10 @@ function _responsive_favicons_normalise_path($file_path) {
     $file_path = str_replace(\Drupal::request()->getSchemeAndHttpHost(), '', $file_path);
   }

-  return '/' . PublicStream::basePath() . '/' . $config->get('path') . $file_path;
+  if ($config->get('path_type') == 'upload') {
+    return '/' . PublicStream::basePath() . '/' . $config->get('path') . $file_path;
+  }
+  else {
+    return $config->get('path') . $file_path;
+  }
 }
diff --git a/src/Controller/GetFile.php b/src/Controller/GetFile.php
index 5c64a71..e9e1bf7 100644
--- a/src/Controller/GetFile.php
+++ b/src/Controller/GetFile.php
@@ -24,7 +24,14 @@ class GetFile extends ControllerBase {
    */
   private function getFile($file_path) {
     $config = $this->config('responsive_favicons.settings');
-    $uri = 'public://' . $config->get('path') . $file_path;
+    if ($config->get('path_type') == 'upload') {
+      $uri = 'public://' . $config->get('path') . $file_path;
+    }
+    else {
+      $uri = $config->get('path') . $file_path;
+    }
+
+    kint($uri);

     $file = new \stdClass();
     $file->uri = $uri;
diff --git a/src/Form/ResponsiveFaviconsAdmin.php b/src/Form/ResponsiveFaviconsAdmin.php
index f8075f0..076dffe 100644
--- a/src/Form/ResponsiveFaviconsAdmin.php
+++ b/src/Form/ResponsiveFaviconsAdmin.php
@@ -34,12 +34,38 @@ class ResponsiveFaviconsAdmin extends ConfigFormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('responsive_favicons.settings');
-    $form['path'] = [
+    $form['path_type'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Favicons location'),
+      '#description' => $this->t('Upload favicons using zip file from realfavicongenerator.net or provide path with location of the files'),
+      '#options' => [
+        'upload' => $this->t('Upload zip file'),
+        'path' => $this->t('Use internal path'),
+      ],
+      '#default_value' => $config->get('path_type'),
+    ];
+    $form['upload_path'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Path to responsive favicon files'),
       '#description' => $this->t('A local file system path where favicon files will be stored. This directory must exist and be writable by Drupal. An attempt will be made to create this directory if it does not already exist.'),
       '#field_prefix' => file_create_url('public://'),
       '#default_value' => $config->get('path'),
+      '#states' => [
+        'visible' => [
+          ':input[name="path_type"]' => ['value' => 'upload'],
+        ],
+      ],
+    ];
+    $form['local_path'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Path to responsive favicon files'),
+      '#description' => $this->t('A local file system path where favicon files are stored (e.g. /themes/custom/your-theme/favicons). This directory must exist, relative to your Drupal root and contain all required files.'),
+      '#default_value' => $config->get('path'),
+      '#states' => [
+        'visible' => [
+          ':input[name="path_type"]' => ['value' => 'path'],
+        ],
+      ],
     ];
     $form['tags'] = [
       '#type' => 'textarea',
@@ -52,6 +78,11 @@ class ResponsiveFaviconsAdmin extends ConfigFormBase {
       '#type' => 'file',
       '#title' => $this->t('Upload a zip file from realfavicongenerator.net to install'),
       '#description' => $this->t('For example: %filename from your local computer. This only needs to be done once.', ['%filename' => 'favicons.zip']),
+      '#states' => [
+        'visible' => [
+          ':input[name="path_type"]' => ['value' => 'upload'],
+        ],
+      ],
     ];
     $form['remove_default'] = [
       '#type' => 'checkbox',
@@ -67,6 +98,20 @@ class ResponsiveFaviconsAdmin extends ConfigFormBase {
     * {@inheritdoc}
     */
   public function validateForm(array &$form, FormStateInterface $form_state) {
+    $path_type = $form_state->getValue('path_type');
+    if ($path_type == 'path') {
+      $path = DRUPAL_ROOT . $form_state->getValue('local_path');
+      if (!file_exists($path)) {
+        $form_state->setErrorByName('local_path', $this->t('Invalid or inaccessible path!'));
+      }
+      if (!file_exists($path . '/browserconfig.xml')) {
+        $form_state->setErrorByName('local_path', $this->t('Cannot find browserconfig.xml file!'));
+      }
+      if (!file_exists($path . '/site.webmanifest')) {
+        $form_state->setErrorByName('local_path', $this->t('Cannot find site.webmanifest json file!'));
+      }
+    }
+
     parent::validateForm($form, $form_state);
   }

@@ -82,77 +127,93 @@ class ResponsiveFaviconsAdmin extends ConfigFormBase {
     $tags = array_filter($tags);
     $config->set('tags', $tags);

+    // Get the favicons location type.
+    $path_type = $form_state->getValue('path_type');
+    $config->set('path_type', $path_type);
+
+    if ($path_type == 'upload') {
+      $path = $form_state->getValue('upload_path');
+    }
+    else {
+      $path = $form_state->getValue('local_path');
+    }
+
     // Remove trailing slash on responsive_favicons_path.
-    $config->set('path', rtrim($form_state->getValue('path')));
+    $config->set('path', rtrim($path));

-    // Checkbox
+    // Checkbox.
     $config->set('remove_default', $form_state->getValue('remove_default'));

-    // Attempt the upload and extraction of the zip file. This code is largely
-    // based on the code in Drupal core.
-    //
-    // @see UpdateManagerInstall->submitForm().
-    $local_cache = NULL;
-    if (!empty($_FILES['files']['name']['upload'])) {
-      $validators = array('file_validate_extensions' => array(archiver_get_extensions()));
-      $field = 'upload';
-      if (!($finfo = file_save_upload('upload', $validators, NULL, 0, FILE_EXISTS_REPLACE))) {
-        // Failed to upload the file. file_save_upload() calls
-        // drupal_set_message() on failure.
-        return;
+    // If path type is upload handle uploaded zip file.
+    if ($path_type == 'upload') {
+      // Attempt the upload and extraction of the zip file. This code is largely
+      // based on the code in Drupal core.
+      //
+      // @see UpdateManagerInstall->submitForm().
+      $local_cache = NULL;
+      if (!empty($_FILES['files']['name']['upload'])) {
+        $validators = array('file_validate_extensions' => array(archiver_get_extensions()));
+        $field = 'upload';
+        if (!($finfo = file_save_upload('upload', $validators, NULL, 0, FILE_EXISTS_REPLACE))) {
+          // Failed to upload the file. file_save_upload() calls
+          // drupal_set_message() on failure.
+          return;
+        }
+        $local_cache = $finfo->getFileUri();
       }
-      $local_cache = $finfo->getFileUri();
-    }

-    // Only execute the below if a file was uploaded.
-    if (isset($local_cache)) {
-      $directory = $this->extractDirectory();
-      try {
-        $archive = $this->archiveExtract($local_cache, $directory);
-      }
-      catch (\Exception $e) {
-        drupal_set_message($e->getMessage(), 'error');
-        return;
-      }
+      // Only execute the below if a file was uploaded.
+      if (isset($local_cache)) {
+        $directory = $this->extractDirectory();
+        try {
+          $archive = $this->archiveExtract($local_cache, $directory);
+        }
+        catch (\Exception $e) {
+          drupal_set_message($e->getMessage(), 'error');
+          return;
+        }

-      $files = $archive->listContents();
-      if (!$files) {
-        $form_state->setError($field, t('Provided archive contains no files.'));
-        return;
-      }
+        $files = $archive->listContents();
+        if (!$files) {
+          $form_state->setError($field, t('Provided archive contains no files.'));
+          return;
+        }

-      $destination = 'public://' . $config->get('path');
-      file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
-
-      // Copy the files to the correct location.
-      $success_count = 0;
-      foreach ($files as $file) {
-        $success = file_unmanaged_copy($directory . '/' . $file, $destination, FILE_EXISTS_REPLACE);
-        $uri = $destination . '/' . $file;
-        if ($success) {
-          $success_count++;
-
-          // Rewrite the paths of the JSON files.
-          if (preg_match('/\.json$/', $file)) {
-            $file_contents = file_get_contents(drupal_realpath($uri));
-            $find = preg_quote('"\/android-chrome', '/');
-            $replace = '"' . str_replace('/', '\/', _responsive_favicons_normalise_path('/android-chrome'));
-            $file_contents = preg_replace('/' . $find . '/', $replace, $file_contents);
-            file_unmanaged_save_data($file_contents, $uri, FILE_EXISTS_REPLACE);
-          }
-          // Rewrite the paths of the XML files.
-          else if (preg_match('/\.xml$/', $file)) {
-            $file_contents = file_get_contents(drupal_realpath($uri));
-            $find = preg_quote('"/mstile', '/');
-            $replace = '"' . _responsive_favicons_normalise_path('/mstile');
-            $file_contents = preg_replace('/' . $find . '/', $replace, $file_contents);
-            file_unmanaged_save_data($file_contents, $uri, FILE_EXISTS_REPLACE);
+        $destination = 'public://' . $config->get('path');
+        file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
+
+        // Copy the files to the correct location.
+        $success_count = 0;
+        foreach ($files as $file) {
+          $success = file_unmanaged_copy($directory . '/' . $file, $destination, FILE_EXISTS_REPLACE);
+          $uri = $destination . '/' . $file;
+          if ($success) {
+            $success_count++;
+
+            // Rewrite the paths of the JSON files.
+            if (preg_match('/\.json$/', $file)) {
+              $file_contents = file_get_contents(drupal_realpath($uri));
+              $find = preg_quote('"/android-chrome', '/');
+              $replace = '"' . str_replace('/', '\/', _responsive_favicons_normalise_path('/android-chrome'));
+              $file_contents = preg_replace('/' . $find . '/', $replace, $file_contents);
+              file_unmanaged_save_data($file_contents, $uri, FILE_EXISTS_REPLACE);
+            }
+            // Rewrite the paths of the XML files.
+            else {
+              if (preg_match('/\.xml$/', $file)) {
+                $file_contents = file_get_contents(drupal_realpath($uri));
+                $find = preg_quote('"/mstile', '/');
+                $replace = '"' . _responsive_favicons_normalise_path('/mstile');
+                $file_contents = preg_replace('/' . $find . '/', $replace, $file_contents);
+                file_unmanaged_save_data($file_contents, $uri, FILE_EXISTS_REPLACE);
+              }
+            }
           }
         }
-      }

-      if ($success_count > 0) {
-        drupal_set_message(\Drupal::translation()->formatPlural($success_count, 'Uploaded 1 favicon file successfully.', 'Uploaded @count favicon files successfully.'));
+        if ($success_count > 0) {
+          drupal_set_message(\Drupal::translation()->formatPlural($success_count, 'Uploaded 1 favicon file successfully.', 'Uploaded @count favicon files successfully.'));
+        }
       }
     }
