diff --git a/core/modules/book/book.services.yml b/core/modules/book/book.services.yml
index 740252e..512b9a1 100644
--- a/core/modules/book/book.services.yml
+++ b/core/modules/book/book.services.yml
@@ -1,18 +1,18 @@
 services:
   book.breadcrumb:
     class: Drupal\book\BookBreadcrumbBuilder
-    arguments: ['@entity_type.manager', '@current_user']
+    arguments: ['@entity_type.manager', '@current_user', '@language_manager']
     tags:
       - { name: breadcrumb_builder, priority: 701 }
   book.manager:
     class: Drupal\book\BookManager
-    arguments: ['@entity_type.manager', '@string_translation', '@config.factory', '@book.outline_storage', '@renderer']
+    arguments: ['@entity_type.manager', '@string_translation', '@config.factory', '@book.outline_storage', '@renderer', '@language_manager']
   book.outline:
     class: Drupal\book\BookOutline
     arguments: ['@book.manager']
   book.export:
     class: Drupal\book\BookExport
-    arguments: ['@entity_type.manager', '@book.manager']
+    arguments: ['@entity_type.manager', '@book.manager', '@language_manager']
   book.outline_storage:
     class: Drupal\book\BookOutlineStorage
     arguments: ['@database']
@@ -36,4 +36,4 @@ services:
     tags:
       - { name: module_install.uninstall_validator }
     arguments: ['@book.outline_storage', '@entity_type.manager', '@string_translation']
-    lazy: true
+    lazy: true
\ No newline at end of file
diff --git a/core/modules/book/src/BookBreadcrumbBuilder.php b/core/modules/book/src/BookBreadcrumbBuilder.php
index db446a0..afd691a 100644
--- a/core/modules/book/src/BookBreadcrumbBuilder.php
+++ b/core/modules/book/src/BookBreadcrumbBuilder.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -32,16 +33,26 @@ class BookBreadcrumbBuilder implements BreadcrumbBuilderInterface {
   protected $account;
 
   /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
    * Constructs the BookBreadcrumbBuilder.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    * @param \Drupal\Core\Session\AccountInterface $account
    *   The current user account.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $account) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $account, LanguageManagerInterface $language_manager = null) {
     $this->nodeStorage = $entity_type_manager->getStorage('node');
     $this->account = $account;
+    $this->languageManager = $language_manager ?: \Drupal::service('language_manager');
   }
 
   /**
@@ -68,11 +79,17 @@ public function build(RouteMatchInterface $route_match) {
       $depth++;
     }
     $parent_books = $this->nodeStorage->loadMultiple($book_nids);
+    $langcode = $this->languageManager->getCurrentLanguage()->getId();
     if (count($parent_books) > 0) {
       $depth = 1;
       while (!empty($book['p' . ($depth + 1)])) {
         if (!empty($parent_books[$book['p' . $depth]]) && ($parent_book = $parent_books[$book['p' . $depth]])) {
           $access = $parent_book->access('view', $this->account, TRUE);
+          if ($parent_book->isTranslatable()) {
+            if ($parent_book->hasTranslation($langcode)) {
+              $parent_book = $parent_book->getTranslation($langcode);
+            }
+          }
           $breadcrumb->addCacheableDependency($access);
           if ($access->isAllowed()) {
             $breadcrumb->addCacheableDependency($parent_book);
@@ -87,4 +104,4 @@ public function build(RouteMatchInterface $route_match) {
     return $breadcrumb;
   }
 
-}
+}
\ No newline at end of file
diff --git a/core/modules/book/src/BookExport.php b/core/modules/book/src/BookExport.php
index d130610..8efb69d 100644
--- a/core/modules/book/src/BookExport.php
+++ b/core/modules/book/src/BookExport.php
@@ -3,6 +3,7 @@
 namespace Drupal\book;
 
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\node\NodeInterface;
 
 /**
@@ -34,17 +35,27 @@ class BookExport {
   protected $bookManager;
 
   /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
    * Constructs a BookExport object.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\book\BookManagerInterface $book_manager
    *   The book manager.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, BookManagerInterface $book_manager) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, BookManagerInterface $book_manager, LanguageManagerInterface $language_manager = null) {
     $this->nodeStorage = $entity_type_manager->getStorage('node');
     $this->viewBuilder = $entity_type_manager->getViewBuilder('node');
     $this->bookManager = $book_manager;
+    $this->languageManager = $language_manager ?: \Drupal::service('language_manager');
   }
 
   /**
@@ -102,11 +113,18 @@ public function bookExportHtml(NodeInterface $node) {
   protected function exportTraverse(array $tree, $callable) {
     // If there is no valid callable, use the default callback.
     $callable = !empty($callable) ? $callable : [$this, 'bookNodeExport'];
+    $langcode = $this->languageManager->getCurrentLanguage()->getId();
 
     $build = [];
     foreach ($tree as $data) {
-      // Note- access checking is already performed when building the tree.
+      // Access checking is already performed when building the tree.
       if ($node = $this->nodeStorage->load($data['link']['nid'])) {
+        if ($node->isTranslatable()) {
+          if ($node->hasTranslation($langcode)) {
+            $node = $node->getTranslation($langcode);
+          }
+        }
+
         $children = $data['below'] ? $this->exportTraverse($data['below'], $callable) : '';
         $build[] = call_user_func($callable, $node, $children);
       }
@@ -141,4 +159,4 @@ protected function bookNodeExport(NodeInterface $node, $children = '') {
     ];
   }
 
-}
+}
\ No newline at end of file
diff --git a/core/modules/book/src/BookManager.php b/core/modules/book/src/BookManager.php
index bfe5588..4be4bd1 100644
--- a/core/modules/book/src/BookManager.php
+++ b/core/modules/book/src/BookManager.php
@@ -7,6 +7,7 @@
 use Drupal\Core\DependencyInjection\DeprecatedServicePropertyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -75,6 +76,13 @@ class BookManager implements BookManagerInterface {
   protected $renderer;
 
   /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
    * Constructs a BookManager object.
    *
    * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
@@ -88,12 +96,13 @@ class BookManager implements BookManagerInterface {
    * @param \Drupal\Core\Render\RendererInterface $renderer
    *   The renderer.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $translation, ConfigFactoryInterface $config_factory, BookOutlineStorageInterface $book_outline_storage, RendererInterface $renderer) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $translation, ConfigFactoryInterface $config_factory, BookOutlineStorageInterface $book_outline_storage, RendererInterface $renderer, LanguageManagerInterface $language_manager = null) {
     $this->entityTypeManager = $entity_type_manager;
     $this->stringTranslation = $translation;
     $this->configFactory = $config_factory;
     $this->bookOutlineStorage = $book_outline_storage;
     $this->renderer = $renderer;
+    $this->languageManager = $language_manager ?: \Drupal::service('language_manager');
   }
 
   /**
@@ -118,10 +127,16 @@ protected function loadBooks() {
       $nodes = $this->entityTypeManager->getStorage('node')->loadMultiple($nids);
       // @todo: Sort by weight and translated title.
 
+      $langcode = $this->languageManager->getCurrentLanguage()->getId();
       // @todo: use route name for links, not system path.
       foreach ($book_links as $link) {
         $nid = $link['nid'];
         if (isset($nodes[$nid]) && $nodes[$nid]->status) {
+          if ($nodes[$nid]->isTranslatable()) {
+            if ($nodes[$nid]->hasTranslation($langcode)) {
+              $nodes[$nid] = $nodes[$nid]->getTranslation($langcode);
+            }
+          }
           $link['url'] = $nodes[$nid]->toUrl();
           $link['title'] = $nodes[$nid]->label();
           $link['type'] = $nodes[$nid]->bundle();
@@ -433,6 +448,14 @@ protected function recurseTableOfContents(array $tree, $indent, array &$toc, arr
 
     $nodes = $this->entityTypeManager->getStorage('node')->loadMultiple($nids);
 
+    // Load nodes with proper translation.
+    $langcode = $this->languageManager->getCurrentLanguage()->getId();
+    foreach ($nodes as $nid => $node) {
+      if ($node->isTranslatable() && $node->hasTranslation($langcode)) {
+        $nodes[$nid] = $node->getTranslation($langcode);
+      }
+    }
+
     foreach ($tree as $data) {
       $nid = $data['link']['nid'];
       // Check for excluded or missing node.
@@ -483,7 +506,7 @@ public function deleteFromBook($nid) {
    */
   public function bookTreeAllData($bid, $link = NULL, $max_depth = NULL) {
     $tree = &drupal_static(__METHOD__, []);
-    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
+    $language_interface = $this->languageManager->getCurrentLanguage();
 
     // Use $nid as a flag for whether the data being loaded is for the whole
     // tree.
@@ -564,6 +587,7 @@ public function bookTreeOutput(array $tree) {
    */
   protected function buildItems(array $tree) {
     $items = [];
+    $langcode = $this->languageManager->getCurrentLanguage()->getId();
 
     foreach ($tree as $data) {
       $element = [];
@@ -595,6 +619,11 @@ protected function buildItems(array $tree) {
       $element['attributes'] = new Attribute();
       $element['title'] = $data['link']['title'];
       $node = $this->entityTypeManager->getStorage('node')->load($data['link']['nid']);
+      if ($node->isTranslatable()) {
+        if ($node->hasTranslation($langcode)) {
+          $node = $node->getTranslation($langcode);
+        }
+      }
       $element['url'] = $node->toUrl();
       $element['localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : [];
       $element['localized_options']['set_active_class'] = TRUE;
@@ -674,7 +703,7 @@ protected function bookTreeBuild($bid, array $parameters = []) {
   protected function doBookTreeBuild($bid, array $parameters = []) {
     // Static cache of already built menu trees.
     $trees = &drupal_static(__METHOD__, []);
-    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
+    $language_interface = $this->languageManager->getCurrentLanguage();
 
     // Build the cache id; sort parents to prevent duplicate storage and remove
     // default parameter values.
@@ -1023,6 +1052,12 @@ public function bookLinkTranslate(&$link) {
         $node = $this->entityTypeManager->getStorage('node')
           ->load($link['nid']);
       }
+      if ($node->isTranslatable()) {
+        $langcode = $this->languageManager->getCurrentLanguage()->getId();
+        if ($node->hasTranslation($langcode)) {
+          $node = $node->getTranslation($langcode);
+        }
+      }
       // The node label will be the value for the current user's language.
       $link['title'] = $node->label();
       $link['options'] = [];
@@ -1159,4 +1194,4 @@ public function bookSubtreeData($link) {
     return $tree[$cid];
   }
 
-}
+}
\ No newline at end of file
diff --git a/core/modules/book/src/Form/BookAdminEditForm.php b/core/modules/book/src/Form/BookAdminEditForm.php
index 8ec9d64..2eb87df 100644
--- a/core/modules/book/src/Form/BookAdminEditForm.php
+++ b/core/modules/book/src/Form/BookAdminEditForm.php
@@ -8,6 +8,7 @@
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
 use Drupal\node\NodeInterface;
@@ -35,16 +36,26 @@ class BookAdminEditForm extends FormBase {
   protected $bookManager;
 
   /**
+   * The language manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
    * Constructs a new BookAdminEditForm.
    *
    * @param \Drupal\Core\Entity\EntityStorageInterface $node_storage
    *   The custom block storage.
    * @param \Drupal\book\BookManagerInterface $book_manager
    *   The book manager.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   The language manager.
    */
-  public function __construct(EntityStorageInterface $node_storage, BookManagerInterface $book_manager) {
+  public function __construct(EntityStorageInterface $node_storage, BookManagerInterface $book_manager, LanguageManagerInterface $language_manager = null) {
     $this->nodeStorage = $node_storage;
     $this->bookManager = $book_manager;
+    $this->languageManager = $language_manager ?: \Drupal::service('language_manager');
   }
 
   /**
@@ -54,7 +65,8 @@ public static function create(ContainerInterface $container) {
     $entity_manager = $container->get('entity.manager');
     return new static(
       $entity_manager->getStorage('node'),
-      $container->get('book.manager')
+      $container->get('book.manager'),
+      $container->get('language_manager')
     );
   }
 
@@ -100,6 +112,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       $order = array_flip(array_keys($user_input['table']));
       $form['table'] = array_merge($order, $form['table']);
 
+      $langcode = $this->languageManager->getCurrentLanguage()->getId();
       foreach (Element::children($form['table']) as $key) {
         if ($form['table'][$key]['#item']) {
           $row = $form['table'][$key];
@@ -116,6 +129,11 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
           // Update the title if changed.
           if ($row['title']['#default_value'] != $values['title']) {
             $node = $this->nodeStorage->load($values['nid']);
+            if ($node->isTranslatable()) {
+              if ($node->hasTranslation($langcode)) {
+                $node = $node->getTranslation($langcode);
+              }
+            }
             $node->revision_log = $this->t('Title changed from %original to %current.', ['%original' => $node->label(), '%current' => $values['title']]);
             $node->title = $values['title'];
             $node->book['link_title'] = $values['title'];
@@ -294,4 +312,4 @@ protected function bookAdminTableTree(array $tree, array &$form) {
     }
   }
 
-}
+}
\ No newline at end of file
